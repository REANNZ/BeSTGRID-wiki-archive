--- iRODS-3.3.1.orig/server/core/src/reServerLib.c	2012-03-27 14:02:55.000000000 +1300
+++ iRODS-3.3.1/server/core/src/reServerLib.c	2014-11-26 12:11:48.000000000 +1300
@@ -501,7 +501,6 @@
 		  reExec->reExecProc[thrInx].pid, thrInx); 
 #endif
 	        /* parent fall through here */
-	        reExec->runCnt++;
 	        continue;
 	    }
 	}
@@ -641,19 +640,17 @@
 	return 0;	
     }
 
-    reExec->runCnt = 0;		/* reset each time */
     for (i = 0; i < reExec->maxRunCnt; i++) {
 	if (reExec->reExecProc[i].procExecState == RE_PROC_IDLE) {
 	    if (thrInx == SYS_NO_FREE_RE_THREAD) {
 		thrInx = i;
 	    }
-	} else {
-	    reExec->runCnt++;
 	}
     }
-    if (thrInx == SYS_NO_FREE_RE_THREAD) {
+	reExec->runCnt++;
+/*    if (thrInx == SYS_NO_FREE_RE_THREAD) {
 	thrInx = waitAndFreeReThr (rsComm, reExec);
-    }
+    }*/
     if (thrInx >= 0) 
         reExec->reExecProc[thrInx].procExecState = RE_PROC_RUNNING;
 
@@ -706,6 +703,15 @@
 
 	        if(exeFrequency == NULL || strlen(exeFrequency->value) == 0 || strcmp(exeStatus->value, RE_RUNNING) == 0) {
 
+			int i;
+			int overlap = 0;
+			for(i =0;i<reExec->maxRunCnt;i++) {
+				if(i != thrInx && strcmp(reExec->reExecProc[i].ruleExecSubmitInp.ruleExecId, ruleExecId)==0) {
+				    overlap++;
+				}
+			}
+				        
+			if(overlap == 0) {
 		/* something wrong since the entry is not deleted. could
 		 * be core dump */
                 if ((reExecProc->jobType & RE_FAILED_STATUS) == 0) {
@@ -718,6 +724,7 @@
 		      ruleExecId);
 		    rstrcpy (ruleExecDelInp.ruleExecId, ruleExecId, NAME_LEN);
                     status = rsRuleExecDel (rsComm, &ruleExecDelInp);
+			}
 		}
 	        }
 			freeGenQueryOut (&genQueryOut);
