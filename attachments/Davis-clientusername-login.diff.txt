Index: src/webdavis/FSUtilities.java
===================================================================
--- src/webdavis/FSUtilities.java	(revision 950)
+++ src/webdavis/FSUtilities.java	(working copy)
@@ -540,7 +540,7 @@
     			}
     			mdata.addItem((String)p.getValue(IRODSMetaDataSet.META_COLL_ATTR_NAME), (String)p.getValue(IRODSMetaDataSet.META_COLL_ATTR_VALUE));
     		}
-    		Log.log(Log.DEBUG, "IRODSCollectionMetadata for file '"+collection.getAbsolutePath()+"' for user '"+((IRODSFileSystem)collection.getFileSystem()).getUserName()+"': \n"+results);
+    		Log.log(Log.DEBUG, "IRODSCollectionMetadata for file '"+collection.getAbsolutePath()+"' for user '"+((IRODSAccount)((IRODSFileSystem)collection.getFileSystem()).getAccount()).getEffectiveClientUserName()+"': \n"+results);
     		return results;
 		} catch (NullPointerException e) {
 			e.printStackTrace();
@@ -650,7 +650,7 @@
 		HashMap<String, FileMetadata> metadata = null;
 		if (getMetadata)
 			metadata = getIRODSCollectionMetadata(collection);
-		Log.log(Log.DEBUG, "getIRODSCollectionDetails '"+collection.getAbsolutePath()+"' for "+((IRODSFileSystem)collection.getFileSystem()).getUserName());
+		Log.log(Log.DEBUG, "getIRODSCollectionDetails '"+collection.getAbsolutePath()+"' for "+((IRODSAccount)((IRODSFileSystem)collection.getFileSystem()).getAccount()).getEffectiveClientUserName());
 		MetaDataCondition conditionsFile[] = {
 			MetaDataSet.newCondition(GeneralMetaData.DIRECTORY_NAME, MetaDataCondition.EQUAL, collection.getAbsolutePath()),
 //			MetaDataSet.newCondition(IRODSMetaDataSet.FILE_REPLICA_STATUS, MetaDataCondition.EQUAL, "1"),
Index: src/webdavis/AuthorizationProcessor.java
===================================================================
--- src/webdavis/AuthorizationProcessor.java	(revision 950)
+++ src/webdavis/AuthorizationProcessor.java	(working copy)
@@ -1,5 +1,7 @@
 package webdavis;
 
+import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.security.GeneralSecurityException;
 import java.security.MessageDigest;
@@ -26,6 +28,7 @@
 import edu.sdsc.grid.io.irods.IRODSAccount;
 import edu.sdsc.grid.io.irods.IRODSConstants;
 import edu.sdsc.grid.io.irods.IRODSFileSystem;
+import edu.sdsc.grid.io.local.LocalFile;
 import edu.sdsc.grid.io.srb.SRBAccount;
 import edu.sdsc.grid.io.srb.SRBFileSystem;
 
@@ -191,6 +194,7 @@
 		String serverName=davisConfig.getServerName();
 		GSSCredential gssCredential=null;
 		String sessionID=null;
+		boolean shibUseAdminLogin = davisConfig.getShibUseAdminLogin();
 		
 		if (sharedToken !=null && commonName !=null && sharedToken.length() > 0 && commonName.length() > 0){ // Shib session?
 			sessionID = "|"+SimpleMD5.MD5(sharedToken+":"+shibSessionID) + "*shib|";
@@ -198,8 +202,8 @@
 			Map result;
 			if (sharedToken !=null && commonName !=null && (result=shibUtil.passInShibSession(sharedToken,commonName)) != null){  //found shib session, get username/password
 				user=(String) result.get("username");
-				password=(char[]) result.get("password");
-				Log.log(Log.DEBUG,"shibUtil got user "+user+" and generated a new password.");
+				password=(char[]) result.get("password"); // password may be null when using shibUseAdminLogin
+				Log.log(Log.DEBUG,"shibUtil got user "+user+(password!=null ? " and generated a new password." : " and returned a null password - for a clientUserName login"));
 			}
 		}else 
 		if (authorization.regionMatches(true, 0, "Basic ", 0, 6)) { // Basic
@@ -437,10 +441,33 @@
 				}
 			}
 			Log.log(Log.DEBUG, "Davis session created.");
-		}else if (user!=null&&password!=null){
+		}else if (user!=null&& (shibUseAdminLogin || password!=null)){
 			Log.log(Log.DEBUG,"login with username/password");
 			if (davisConfig.getServerType().equalsIgnoreCase("irods")){
-				account = new IRODSAccount(davisConfig.getServerName(), davisConfig.getServerPort(), user, new String(password), "/" + davisConfig.getZoneName() + "/home/" + user, davisConfig.getZoneName(), defaultResource);
+				if (!shibUseAdminLogin || (sharedToken==null)) {
+					account = new IRODSAccount(davisConfig.getServerName(), davisConfig.getServerPort(), user, new String(password), "/" + davisConfig.getZoneName() + "/home/" + user, davisConfig.getZoneName(), defaultResource);					
+				} else { // only do this if shibUseAdminLogin && sharedToken !=null (i.e., shib login)
+					try {
+						String adminCredsDir = davisConfig.getInitParameter("admin-creds-dir", true);
+						if (adminCredsDir == null) {
+							// TODO: or not exists
+							Log.log(Log.ERROR, "Error: shib-use-admin-login is used without specifying admin-creds-dir");
+							return null;
+						}
+						// needs a directory with a .irodsEnv file with settings and a .irodsA file with password 
+						account = new IRODSAccount(new LocalFile(adminCredsDir));
+						account.setHost(davisConfig.getServerName());
+						account.setPort(davisConfig.getServerPort());
+						account.setHomeDirectory("/" + davisConfig.getZoneName() + "/home/" + user);
+						((IRODSAccount)account).setZone(davisConfig.getZoneName());
+						((IRODSAccount)account).setDefaultStorageResource(defaultResource);
+						((IRODSAccount)account).setClientUserName(user);
+					} catch (IOException e) {
+						e.printStackTrace();
+						Log.log(Log.ERROR, e);
+						return null;
+					}
+				}
 				davisSession = new DavisSession();
 				davisSession.setServerName(davisConfig.getServerName());
 				davisSession.setServerPort(davisConfig.getServerPort());
@@ -470,7 +497,7 @@
 				Log.log(Log.DEBUG, "irods fs:"+irodsFileSystem);
 				homeDir = irodsFileSystem.getHomeDirectory();
 				if (davisSession.getAccount() == null || davisSession.getAccount().equals("")){
-					user = irodsFileSystem.getUserName(); //FSUtilities.getiRODSUsernameByDN(irodsFileSystem, davisSession.getDn());
+					user = ((IRODSAccount)irodsFileSystem.getAccount()).getEffectiveClientUserName(); //FSUtilities.getiRODSUsernameByDN(irodsFileSystem, davisSession.getDn());
 					if (user == null || user.equals(""))
 						return null;
 					Log.log(Log.DEBUG, "Found iRODS user '"+user+"' for GSI");
Index: src/webdavis/ShibUtil.java
===================================================================
--- src/webdavis/ShibUtil.java	(revision 950)
+++ src/webdavis/ShibUtil.java	(working copy)
@@ -221,6 +221,51 @@
         return in;
 
     }
+    public String lookupUsernameByST(IRODSFileSystem irodsFileSystem, String sharedToken) throws IOException {
+    	String username = null;
+        
+        String[] selectFieldNames = {
+				IRODSMetaDataSet.USER_NAME,
+			};
+		MetaDataCondition conditions[] = {
+							MetaDataSet.newCondition(
+									IRODSMetaDataSet.USER_INFO,	MetaDataCondition.LIKE, "%<ST>"+sharedToken+"</ST>%")
+						};
+		MetaDataSelect selects[] =
+				MetaDataSet.newSelection( selectFieldNames );
+		MetaDataRecordList[] userDetails = irodsFileSystem.query(conditions,selects,1);
+//		IRODSAdmin admin = new IRODSAdmin(irodsFileSystem);
+		if (userDetails!=null) {
+			username=(String) userDetails[0].getValue(IRODSMetaDataSet.USER_NAME);
+//			password=getRandomPassword(12);
+//			admin.USER.modifyPassword(username, new String(password));
+//			changePasswordRule(irodsFileSystem, username, new String(password));
+		}else {
+			return null;
+//			String[] names=commonName.split(" ");
+//			String base=names[0].toLowerCase()+"."+names[names.length-1].toLowerCase();
+//			for (int i=0;i<20;i++){
+//				if (i>0) 
+//					username=base+i;
+//				else
+//					username=base;
+//				conditions[0] = MetaDataSet.newCondition(
+//								IRODSMetaDataSet.USER_NAME,	MetaDataCondition.LIKE, username);
+//				userDetails = irodsFileSystem.query(conditions,selects,1);
+//				if (userDetails==null||userDetails.length==0){
+//					Log.log(Log.DEBUG, "Creating new user "+username);
+//					admin.USER.addUser(username, "rodsuser");
+//					admin.USER.modifyInfo(username, "<ST>"+sharedToken+"</ST>");
+//					password=getRandomPassword(12);
+////					admin.USER.modifyPassword(username, new String(password));
+//					changePasswordRule(irodsFileSystem, username, new String(password));
+//					break;
+//				}
+//			}
+		}
+		return username;
+    
+    }
     public Map passInShibSession(String sharedToken, String commonName){
     	String username=null;
     	char[] password=null;
@@ -228,6 +273,8 @@
     	if (sharedToken==null) return null;
 		GlobusCredential adminCred;
 		DavisConfig config=Davis.getConfig();
+		boolean shibUseAdminLogin = config.getShibUseAdminLogin();
+		
 		try {
 			adminCred = new GlobusCredential(config.getAdminCertFile(), config.getAdminKeyFile());
 	        GSSCredential gssCredential = new GlobusGSSCredentialImpl(adminCred, GSSCredential.INITIATE_AND_ACCEPT);
@@ -237,51 +284,22 @@
 		        adminAccount.setUserName(config.getInitParameter("adminUsername", "rods"));
 		        IRODSFileSystem irodsFileSystem = new IRODSFileSystem(adminAccount);
 		        
-		        password=getRandomPassword(12);
-		        createUser(irodsFileSystem,commonName,String.valueOf(password),sharedToken);
+		        if (shibUseAdminLogin) {
+		        	username = lookupUsernameByST(irodsFileSystem, sharedToken);
+		        };
 		        
-		        String[] selectFieldNames = {
-						IRODSMetaDataSet.USER_NAME,
-					};
-				MetaDataCondition conditions[] = {
-									MetaDataSet.newCondition(
-											IRODSMetaDataSet.USER_INFO,	MetaDataCondition.LIKE, "%<ST>"+sharedToken+"</ST>%")
-								};
-				MetaDataSelect selects[] =
-						MetaDataSet.newSelection( selectFieldNames );
-				MetaDataRecordList[] userDetails = irodsFileSystem.query(conditions,selects,1);
-//				IRODSAdmin admin = new IRODSAdmin(irodsFileSystem);
-				if (userDetails!=null) {
-					username=(String) userDetails[0].getValue(IRODSMetaDataSet.USER_NAME);
-//					password=getRandomPassword(12);
-//					admin.USER.modifyPassword(username, new String(password));
-//					changePasswordRule(irodsFileSystem, username, new String(password));
-				}else {
+		        if (!shibUseAdminLogin || username == null) {
+		        	password=getRandomPassword(12);
+		        	createUser(irodsFileSystem,commonName,String.valueOf(password),sharedToken);
+			        username = lookupUsernameByST(irodsFileSystem, sharedToken);
+		        };
+		        if (username == null) {
 					irodsFileSystem.close();
-					return null;
-//					String[] names=commonName.split(" ");
-//					String base=names[0].toLowerCase()+"."+names[names.length-1].toLowerCase();
-//					for (int i=0;i<20;i++){
-//						if (i>0) 
-//							username=base+i;
-//						else
-//							username=base;
-//						conditions[0] = MetaDataSet.newCondition(
-//										IRODSMetaDataSet.USER_NAME,	MetaDataCondition.LIKE, username);
-//						userDetails = irodsFileSystem.query(conditions,selects,1);
-//						if (userDetails==null||userDetails.length==0){
-//							Log.log(Log.DEBUG, "Creating new user "+username);
-//							admin.USER.addUser(username, "rodsuser");
-//							admin.USER.modifyInfo(username, "<ST>"+sharedToken+"</ST>");
-//							password=getRandomPassword(12);
-////							admin.USER.modifyPassword(username, new String(password));
-//							changePasswordRule(irodsFileSystem, username, new String(password));
-//							break;
-//						}
-//					}
-				}
+			       	return null;		        	
+		        }
+		        		        
 				result.put("username", username);
-				result.put("password", password);
+				result.put("password", password); // password may be null when using shibUseAdminLogin
 				irodsFileSystem.close();
 		       	return result;
 	        }
Index: src/webdavis/PropertiesDirector.java
===================================================================
--- src/webdavis/PropertiesDirector.java	(revision 950)
+++ src/webdavis/PropertiesDirector.java	(working copy)
@@ -20,6 +20,7 @@
 import edu.sdsc.grid.io.RemoteFileSystem;
 import edu.sdsc.grid.io.irods.IRODSFile;
 import edu.sdsc.grid.io.irods.IRODSFileSystem;
+import edu.sdsc.grid.io.irods.IRODSAccount;
 import edu.sdsc.grid.io.irods.IRODSMetaDataSet;
 import edu.sdsc.grid.io.srb.SRBFile;
 import edu.sdsc.grid.io.srb.SRBFileSystem;
@@ -238,7 +239,7 @@
 //    		for (int i=0;i<children.length;i++){
 //    			files[i]=new IRODSFile((IRODSFile)file,children[i]);
 //    		}
-    		Log.log(Log.DEBUG, "getChildren '"+file.getAbsolutePath()+"' for "+((IRODSFileSystem)file.getFileSystem()).getUserName());
+    		Log.log(Log.DEBUG, "getChildren '"+file.getAbsolutePath()+"' for "+((IRODSAccount)((IRODSFileSystem)file.getFileSystem()).getAccount()).getEffectiveClientUserName());
     		return FSUtilities.getIRODSCollectionDetails(file);   		
     	}
     	return null;
Index: src/webdavis/DavisConfig.java
===================================================================
--- src/webdavis/DavisConfig.java	(revision 950)
+++ src/webdavis/DavisConfig.java	(working copy)
@@ -110,6 +110,8 @@
     private String styleSheet1, styleSheet2;
     private boolean quickShareOwnerOnly;
     private boolean logDirtyReplicas;
+	private String adminCredsDir;
+	private boolean shibUseAdminLogin;
     
     
     // General parameter substitutions for HTML file (substitutions not related to a file or request)
@@ -385,6 +387,8 @@
 		styleSheet2 = getInitParameter("davis-style-sheet-override", "/include/davis-override.css").trim();
 		quickShareOwnerOnly = Boolean.valueOf(getInitParameter("quickshare-owner-only", "true").trim()).booleanValue();
 		logDirtyReplicas = Boolean.valueOf(getInitParameter("log-dirty-replicas", "true").trim()).booleanValue();
+		adminCredsDir = getInitParameter("admin-creds-dir", "").trim();
+		shibUseAdminLogin = Boolean.valueOf(getInitParameter("shib-use-admin-login", "false").trim()).booleanValue();
 		
 		Log.log(Log.DEBUG, "Logging initialized.");
 		if (Log.getThreshold() < Log.INFORMATION) 
@@ -818,4 +822,12 @@
 	public String getStyleSheetOverridePath() {
 		return styleSheet2;
 	}
+
+	public String getAdminCredsDir() {
+		return adminCredsDir;
+	}
+
+	public boolean getShibUseAdminLogin() {
+		return shibUseAdminLogin;
+	}
 }
Index: WebContent/WEB-INF/davis.properties
===================================================================
--- WebContent/WEB-INF/davis.properties	(revision 950)
+++ WebContent/WEB-INF/davis.properties	(working copy)
@@ -411,3 +411,26 @@
 #
 # Default is true.
 # log-dirty-replicas=true
+
+# Set location of admin credentials.  This is used with the shibAdminLogin
+# method (below).  When set, should point to a directory that has the login
+# details for a rodsadmin account (typically the rods user).  The directory
+# should contain two files:
+# * .irodsEnv at least setting irodsUserName - e.g.
+#      irodsUserName 'rods'
+# * .irodsA with a single line containing the password of the rods user
+# Default is no directory is set
+# admin-creds-dir=
+
+# Enable an alternative login method for Shibboleth login that does not reset
+# the password associated with the iRODS account but instead uses an admin
+# account to establish the connection - but the connection runs with the
+# privileges of the target user.  
+#
+# This is the equivalent of using clientUserName with iCommands.
+# 
+# This option requires that the admin-creds-dir option is correctly configured
+# to log in as a rodsadmin account (typically rods).
+# Default is false
+# shib-use-admin-login=false
+
